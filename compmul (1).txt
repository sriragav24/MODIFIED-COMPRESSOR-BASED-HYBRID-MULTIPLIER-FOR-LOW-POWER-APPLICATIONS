
module multiplier_8x8(
     A,
     B,
    P
);
input [7:0] A;
    input [7:0] B;
    output [15:0] P;
	 
wire [6:0] P0, P1, P2, P3;

multiplier_4x4 U0(.A(A[3:0]), .B(B[3:0]), .P(P0));
multiplier_4x4 U1(.A(A[7:4]), .B(B[3:0]), .P(P1));
multiplier_4x4 U2(.A(A[3:0]), .B(B[7:4]), .P(P2));
multiplier_4x4 U3(.A(A[7:4]), .B(B[7:4]), .P(P3));

assign P = {P3, P2, P1, P0};

endmodule

module compressor(X1, X2, X4,Sum, Carry
    
     
);
input X1, X2, X4;
output Sum, Carry;
	 reg Sum, Carry;

always @(*)
begin
 Sum = X1&X2&X4 + X1&(X2 | X4) | X2&X4 | X2;
 Carry = X2 | X2&X4 |  X1&X4 | X1 & X2;
end
endmodule

module multiplier_4x4(
    input [3:0] A,
    input [3:0] B,
    output [6:0] P
); 

wire s0, c0, s1, c1, s2, c2, s3, c3;

compressor U0(.X1(A[0]), .X2(B[0]), .X4(1'b0), .Sum(s0), .Carry(c0));
compressor U1(.X1(A[1]), .X2(B[0]), .X4(1'b0), .Sum(s1), .Carry(c1));
compressor U2(.X1(A[2]), .X2(B[0]), .X4(1'b0), .Sum(s2), .Carry(c2));
compressor U3(.X1(A[3]), .X2(B[0]), .X4(1'b0), .Sum(s3), .Carry(c3));

assign P[0] = s0;
assign P[1] = s1 ^ c0;
assign P[2] = s2 ^ (c1 | (s1 & c0));
assign P[3] = s3 ^ (c2 | (s2 & (c1 | (s1 & c0))));
assign P[4] = (c2 & (s2 | (s1 & c0))) | (c1 & (s1 | c0));
assign P[5] = c2 & (c1 | (s1 & c0));
assign P[6] = c2 & c1;

endmodule
